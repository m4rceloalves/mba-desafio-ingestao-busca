"""
Script de Chat Interativo para Sistema RAG

Este script fornece a interface CLI interativa para fazer perguntas
ao sistema RAG, delegando a l√≥gica de busca sem√¢ntica para search.py.

Uso:
    python chat.py
"""

import sys
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain_google_genai import ChatGoogleGenerativeAI
from search import inicializar_sistema_rag, processar_pergunta

# Carregar vari√°veis de ambiente
load_dotenv()


def escolher_modelo():
    """Permite ao usu√°rio escolher entre OpenAI e Gemini."""
    print("\n" + "="*60)
    print("ü§ñ ESCOLHA O MODELO DE IA")
    print("="*60)
    print("1. OpenAI (gpt-5-nano)")
    print("2. Google Gemini (gemini-2.5-flash-lite)")
    print("="*60)

    while True:
        escolha = input("\n‚û°Ô∏è  Digite 1 ou 2: ").strip()

        if escolha == "1":
            print("‚úÖ Modelo selecionado: OpenAI gpt-5-nano")
            return ChatOpenAI(
                model="gpt-5-nano",
                temperature=0
            )
        elif escolha == "2":
            print("‚úÖ Modelo selecionado: Google Gemini")
            return ChatGoogleGenerativeAI(
                model="gemini-2.5-flash-lite",
                temperature=0
            )
        else:
            print("‚ùå Op√ß√£o inv√°lida! Digite 1 ou 2.")


def exibir_cabecalho():
    """Exibe o cabe√ßalho do sistema de chat."""
    print("\n" + "="*60)
    print("üîç SISTEMA DE BUSCA SEM√ÇNTICA - RAG com LangChain")
    print("="*60)
    print("‚ÑπÔ∏è  Digite sua pergunta ou 'sair' para encerrar")
    print("="*60 + "\n")


def loop_interativo(chain):
    """Loop principal de intera√ß√£o com o usu√°rio."""
    exibir_cabecalho()

    while True:
        try:
            pergunta = input("\n‚û°Ô∏è  PERGUNTA: ").strip()

            if not pergunta:
                print("‚ö†Ô∏è  Por favor, digite uma pergunta v√°lida.")
                continue

            if pergunta.lower() in ['sair', 'exit', 'quit', 'q']:
                print("\n" + "="*60)
                print("üëã Encerrando o sistema. At√© logo!")
                print("="*60 + "\n")
                break

            # Delegar processamento para search.py
            print(f"\nüí≠ PERGUNTA: {pergunta}")
            print("-"*60)

            try:
                resposta = processar_pergunta(chain, pergunta)
                print(f"üí° RESPOSTA: {resposta}")
                print("-"*60)

            except Exception as e:
                print(f"‚ùå Erro ao processar pergunta: {str(e)}")
                print("-"*60)

        except KeyboardInterrupt:
            print("\n\n" + "="*60)
            print("üëã Sistema interrompido. At√© logo!")
            print("="*60 + "\n")
            break
        except Exception as e:
            print(f"\n‚ùå Erro inesperado: {str(e)}")


def main():
    """Fun√ß√£o principal do sistema de chat."""
    try:
        # Escolher modelo
        llm = escolher_modelo()

        # Inicializar sistema RAG (delegar para search.py)
        print("\nüîÑ Inicializando sistema RAG...")
        chain = inicializar_sistema_rag(llm)
        print("‚úÖ Sistema RAG configurado!")

        # Iniciar loop interativo
        loop_interativo(chain)

    except Exception as e:
        print(f"\n‚ùå Erro ao inicializar o sistema: {str(e)}")
        print("‚ÑπÔ∏è  Certifique-se de que:")
        print("   1. O Docker Compose est√° rodando (docker-compose up -d)")
        print("   2. Voc√™ executou a ingest√£o de um PDF (python ingest.py <pdf>)")
        print("   3. As chaves de API est√£o configuradas no arquivo .env")
        sys.exit(1)


if __name__ == "__main__":
    main()
